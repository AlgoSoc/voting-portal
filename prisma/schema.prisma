// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  pin       String   @unique
  firstName String
  lastName  String
  isAdmin   Boolean  @default(false)
  studentId String   @unique
  votes     Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id         String      @id @default(cuid())
  name       String
  candidates Candidate[]
  elections  Election[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Candidate {
  id         String     @id @default(cuid())
  firstName  String
  lastName   String
  position   Position   @relation(fields: [positionId], references: [id])
  positionId String
  elections  Election[]
  votes      Vote[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Election {
  id         String      @id @default(cuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  positions  Position[]
  candidates Candidate[]
  votes      Vote[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Vote {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  election    Election  @relation(fields: [electionId], references: [id])
  electionId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, electionId, candidateId])
}
